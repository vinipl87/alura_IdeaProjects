Considerando o exemplo do FeatureItem, esperamos que sempre seja enviado um nome e um ícone válidos. Porém, nada o impede de enviar os seguintes valores:

_FeatureItem(
  null,
  null,
  onClick: () => null,
),

Nesta abordagem, o Widget Text reclama por possuir um validador em seu construtor, uma abordagem bacana, mas para Icon, ou onTap, não temos essa mesma sorte. Então, criamos um elemento visual mesmo que seu conteúdo tenha um valor indesejado:

_FeatureItem(
  'test',
  null,
  onClick: () => null,
),

Para ter a mesma validação existente no Text, o Dart nos oferece o assert que apresenta um erro caso a consideração seja falsa. No nosso exemplo, ficaria da seguinte maneira:

_FeatureItem(
    this.name,
    this.icon, {
    @required this.onClick,
  })  : assert(icon != null),
        assert(onClick != null);

Com essa abordagem, valores nulos não são mais aceitos, portanto, mesmo que tenha argumentos obrigatórios ou não, quem usar o Widget FeatureItem será responsável por enviar todos os valores diferentes de nulo.



https://pub.dev/packages/http_interceptor



Durante o curso, acessamos a web API por meio do endereço IP da rede. Essa abordagem exige que ambos os dispositivos, computador como servidor e emulador/celular, estejam na mesma rede.
Caso queira acessar como um endereço público, que não exige a conexão da mesma rede, você pode considerar o ngrok. Esse aplicativo permite configurar um web hook capaz de mapear uma porta do seu computador com um endereço público do serviço do ngrok.
https://cursos.alura.com.br/como-compartilhar-seu-localhost-de-forma-simplificada-com-o-ngrok-c7


 Consegui resolver o problema utilizando a solução do ngrok, o problema é que o Flutter não aceita mais conexões http sem SSL (https://).


Após fazer o download e autenticar o ngrok, o comando foi: ngrok http 8080

Depois foi só copiar a url https e colar no webclient.dart.

Ficou assim a findAll() :

void findAll() async {
  final Client client = HttpClientWithInterceptor.build(
    interceptors: [LoggingInterceptor()],
  );
  final Response response =
      await client.get(Uri.https('fdaf39aef708.ngrok.io', 'transactions'));
  print(response.body);
}

https://pub.dev/documentation/http/latest/http/http-library.html#functions
https://flutter.dev/docs/development/data-and-backend/json#serializing-json-manually-using-dartconvert
https://flutter.dev/docs/development/data-and-backend/json#generating-code-for-nested-classes
